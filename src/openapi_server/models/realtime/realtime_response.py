# coding: utf-8

"""
    OpenAI API

    The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

    The version of the OpenAPI document: 2.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import BaseModel, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_server.models.realtime.realtime_response_status_details import RealtimeResponseStatusDetails
from openapi_server.models.realtime.realtime_response_usage import RealtimeResponseUsage
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class RealtimeResponse(BaseModel):
    """
    The response resource.
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="The unique ID of the response.")
    object: Optional[StrictStr] = Field(default=None, description="The object type, must be `realtime.response`.")
    status: Optional[StrictStr] = Field(default=None, description="The final status of the response (`completed`, `cancelled`, `failed`, `incomplete`).")
    status_details: Optional[RealtimeResponseStatusDetails] = None
    output: Optional[List[Dict[str, Any]]] = Field(default=None, description="The list of output items generated by the response.")
    usage: Optional[RealtimeResponseUsage] = None
    __properties: ClassVar[List[str]] = ["id", "object", "status", "status_details", "output", "usage"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of RealtimeResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of status_details
        if self.status_details:
            _dict['status_details'] = self.status_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of usage
        if self.usage:
            _dict['usage'] = self.usage.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of RealtimeResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "object": obj.get("object"),
            "status": obj.get("status"),
            "status_details": RealtimeResponseStatusDetails.from_dict(obj.get("status_details")) if obj.get("status_details") is not None else None,
            "output": obj.get("output"),
            "usage": RealtimeResponseUsage.from_dict(obj.get("usage")) if obj.get("usage") is not None else None
        })
        return _obj


