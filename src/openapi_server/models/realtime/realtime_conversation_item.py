# coding: utf-8

"""
    OpenAI API

    The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

    The version of the OpenAPI document: 2.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import BaseModel, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_server.models.realtime.realtime_conversation_item_content_inner import RealtimeConversationItemContentInner
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class RealtimeConversationItem(BaseModel):
    """
    The item to add to the conversation.
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="The unique ID of the item, this can be generated by the client to help manage server-side context, but is not required because the server will generate one if not provided.")
    type: Optional[StrictStr] = Field(default=None, description="The type of the item (`message`, `function_call`, `function_call_output`).")
    status: Optional[StrictStr] = Field(default=None, description="The status of the item (`completed`, `incomplete`). These have no effect on the conversation, but are accepted for consistency with the `conversation.item.created` event.")
    role: Optional[StrictStr] = Field(default=None, description="The role of the message sender (`user`, `assistant`, `system`), only applicable for `message` items.")
    content: Optional[List[RealtimeConversationItemContentInner]] = Field(default=None, description="The content of the message, applicable for `message` items. Message items with a role of `system` support only `input_text` content, message items of role `user` support `input_text` and `input_audio` content, and message items of role `assistant` support `text` content.")
    call_id: Optional[StrictStr] = Field(default=None, description="The ID of the function call (for `function_call` and `function_call_output` items). If passed on a `function_call_output` item, the server will check that a `function_call` item with the same ID exists in the conversation history.")
    name: Optional[StrictStr] = Field(default=None, description="The name of the function being called (for `function_call` items).")
    arguments: Optional[StrictStr] = Field(default=None, description="The arguments of the function call (for `function_call` items).")
    output: Optional[StrictStr] = Field(default=None, description="The output of the function call (for `function_call_output` items).")
    __properties: ClassVar[List[str]] = ["id", "type", "status", "role", "content", "call_id", "name", "arguments", "output"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of RealtimeConversationItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in content (list)
        _items = []
        if self.content:
            for _item in self.content:
                if _item:
                    _items.append(_item.to_dict())
            _dict['content'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of RealtimeConversationItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "type": obj.get("type"),
            "status": obj.get("status"),
            "role": obj.get("role"),
            "content": [RealtimeConversationItemContentInner.from_dict(_item) for _item in obj.get("content")] if obj.get("content") is not None else None,
            "call_id": obj.get("call_id"),
            "name": obj.get("name"),
            "arguments": obj.get("arguments"),
            "output": obj.get("output")
        })
        return _obj


