# coding: utf-8

"""
    OpenAI API

    The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

    The version of the OpenAPI document: 2.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class CreateModerationResponseResultsInnerCategoryAppliedInputTypes(BaseModel):
    """
    A list of the categories along with the input type(s) that the score applies to.
    """ # noqa: E501
    hate: List[StrictStr] = Field(description="The applied input type(s) for the category 'hate'.")
    hate_threatening: List[StrictStr] = Field(description="The applied input type(s) for the category 'hate/threatening'.", alias="hate/threatening")
    harassment: List[StrictStr] = Field(description="The applied input type(s) for the category 'harassment'.")
    harassment_threatening: List[StrictStr] = Field(description="The applied input type(s) for the category 'harassment/threatening'.", alias="harassment/threatening")
    illicit: List[StrictStr] = Field(description="The applied input type(s) for the category 'illicit'.")
    illicit_violent: List[StrictStr] = Field(description="The applied input type(s) for the category 'illicit/violent'.", alias="illicit/violent")
    self_harm: List[StrictStr] = Field(description="The applied input type(s) for the category 'self-harm'.", alias="self-harm")
    self_harm_intent: List[StrictStr] = Field(description="The applied input type(s) for the category 'self-harm/intent'.", alias="self-harm/intent")
    self_harm_instructions: List[StrictStr] = Field(description="The applied input type(s) for the category 'self-harm/instructions'.", alias="self-harm/instructions")
    sexual: List[StrictStr] = Field(description="The applied input type(s) for the category 'sexual'.")
    sexual_minors: List[StrictStr] = Field(description="The applied input type(s) for the category 'sexual/minors'.", alias="sexual/minors")
    violence: List[StrictStr] = Field(description="The applied input type(s) for the category 'violence'.")
    violence_graphic: List[StrictStr] = Field(description="The applied input type(s) for the category 'violence/graphic'.", alias="violence/graphic")
    __properties: ClassVar[List[str]] = ["hate", "hate/threatening", "harassment", "harassment/threatening", "illicit", "illicit/violent", "self-harm", "self-harm/intent", "self-harm/instructions", "sexual", "sexual/minors", "violence", "violence/graphic"]

    @field_validator('hate')
    def hate_validate_enum(cls, value):
        """Validates the enum"""
        for i in value:
            if i not in ('text',):
                raise ValueError("each list item must be one of ('text')")
        return value

    @field_validator('hate_threatening')
    def hate_threatening_validate_enum(cls, value):
        """Validates the enum"""
        for i in value:
            if i not in ('text',):
                raise ValueError("each list item must be one of ('text')")
        return value

    @field_validator('harassment')
    def harassment_validate_enum(cls, value):
        """Validates the enum"""
        for i in value:
            if i not in ('text',):
                raise ValueError("each list item must be one of ('text')")
        return value

    @field_validator('harassment_threatening')
    def harassment_threatening_validate_enum(cls, value):
        """Validates the enum"""
        for i in value:
            if i not in ('text',):
                raise ValueError("each list item must be one of ('text')")
        return value

    @field_validator('illicit')
    def illicit_validate_enum(cls, value):
        """Validates the enum"""
        for i in value:
            if i not in ('text',):
                raise ValueError("each list item must be one of ('text')")
        return value

    @field_validator('illicit_violent')
    def illicit_violent_validate_enum(cls, value):
        """Validates the enum"""
        for i in value:
            if i not in ('text',):
                raise ValueError("each list item must be one of ('text')")
        return value

    @field_validator('self_harm')
    def self_harm_validate_enum(cls, value):
        """Validates the enum"""
        for i in value:
            if i not in ('text', 'image',):
                raise ValueError("each list item must be one of ('text', 'image')")
        return value

    @field_validator('self_harm_intent')
    def self_harm_intent_validate_enum(cls, value):
        """Validates the enum"""
        for i in value:
            if i not in ('text', 'image',):
                raise ValueError("each list item must be one of ('text', 'image')")
        return value

    @field_validator('self_harm_instructions')
    def self_harm_instructions_validate_enum(cls, value):
        """Validates the enum"""
        for i in value:
            if i not in ('text', 'image',):
                raise ValueError("each list item must be one of ('text', 'image')")
        return value

    @field_validator('sexual')
    def sexual_validate_enum(cls, value):
        """Validates the enum"""
        for i in value:
            if i not in ('text', 'image',):
                raise ValueError("each list item must be one of ('text', 'image')")
        return value

    @field_validator('sexual_minors')
    def sexual_minors_validate_enum(cls, value):
        """Validates the enum"""
        for i in value:
            if i not in ('text',):
                raise ValueError("each list item must be one of ('text')")
        return value

    @field_validator('violence')
    def violence_validate_enum(cls, value):
        """Validates the enum"""
        for i in value:
            if i not in ('text', 'image',):
                raise ValueError("each list item must be one of ('text', 'image')")
        return value

    @field_validator('violence_graphic')
    def violence_graphic_validate_enum(cls, value):
        """Validates the enum"""
        for i in value:
            if i not in ('text', 'image',):
                raise ValueError("each list item must be one of ('text', 'image')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of CreateModerationResponseResultsInnerCategoryAppliedInputTypes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of CreateModerationResponseResultsInnerCategoryAppliedInputTypes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "hate": obj.get("hate"),
            "hate/threatening": obj.get("hate/threatening"),
            "harassment": obj.get("harassment"),
            "harassment/threatening": obj.get("harassment/threatening"),
            "illicit": obj.get("illicit"),
            "illicit/violent": obj.get("illicit/violent"),
            "self-harm": obj.get("self-harm"),
            "self-harm/intent": obj.get("self-harm/intent"),
            "self-harm/instructions": obj.get("self-harm/instructions"),
            "sexual": obj.get("sexual"),
            "sexual/minors": obj.get("sexual/minors"),
            "violence": obj.get("violence"),
            "violence/graphic": obj.get("violence/graphic")
        })
        return _obj


