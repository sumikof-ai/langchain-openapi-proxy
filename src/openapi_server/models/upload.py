# coding: utf-8

"""
    OpenAI API

    The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

    The version of the OpenAPI document: 2.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_server.models.open_ai_file import OpenAIFile
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Upload(BaseModel):
    """
    The Upload object can accept byte chunks in the form of Parts. 
    """ # noqa: E501
    id: StrictStr = Field(description="The Upload unique identifier, which can be referenced in API endpoints.")
    created_at: StrictInt = Field(description="The Unix timestamp (in seconds) for when the Upload was created.")
    filename: StrictStr = Field(description="The name of the file to be uploaded.")
    bytes: StrictInt = Field(description="The intended number of bytes to be uploaded.")
    purpose: StrictStr = Field(description="The intended purpose of the file. [Please refer here](/docs/api-reference/files/object#files/object-purpose) for acceptable values.")
    status: StrictStr = Field(description="The status of the Upload.")
    expires_at: StrictInt = Field(description="The Unix timestamp (in seconds) for when the Upload was created.")
    object: Optional[StrictStr] = Field(default=None, description="The object type, which is always \"upload\".")
    file: Optional[OpenAIFile] = None
    __properties: ClassVar[List[str]] = ["id", "created_at", "filename", "bytes", "purpose", "status", "expires_at", "object", "file"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('pending', 'completed', 'cancelled', 'expired',):
            raise ValueError("must be one of enum values ('pending', 'completed', 'cancelled', 'expired')")
        return value

    @field_validator('object')
    def object_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('upload',):
            raise ValueError("must be one of enum values ('upload')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Upload from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of file
        if self.file:
            _dict['file'] = self.file.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Upload from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "created_at": obj.get("created_at"),
            "filename": obj.get("filename"),
            "bytes": obj.get("bytes"),
            "purpose": obj.get("purpose"),
            "status": obj.get("status"),
            "expires_at": obj.get("expires_at"),
            "object": obj.get("object"),
            "file": OpenAIFile.from_dict(obj.get("file")) if obj.get("file") is not None else None
        })
        return _obj


